package com.company;

import java.util.*;
import java.util.stream.IntStream;

public class Main {
    static int[] digitOf(int n){
//        System.out.println(n);
        int[] dn = {0, 0, 0, 0};
        for (int i=0; i <4;i++){
            dn[3 - i] = n % 10;
            n = n /10;
        }
//        for (int i = 0; i <dn.length ; i++) {
//            System.out.println(dn[i]);
//        }

        return  dn;
    }
    static void updateAvailable(ArrayList<Integer> arr, int guess, int cmp) {
        arr.removeIf(number -> guessSecret(guess, number) != cmp);
    }
    static int guessWithInputKnuth(){

        int guess = 1123;
        int totalSteps = 1;
        Scanner in = new Scanner(System.in);

        System.out.println("1. Try guess: " + guess);

        //Initialise answers array and availableGuess dict
        int[] answers = {0,1,2,3,4,10,11,12,13,20,21,22,30,31,40};

        //To store possible guesses
        ArrayList availableGuess = new ArrayList();
        for (int i=0;i<10000;i++){
            availableGuess.add(i);
        }

        //Get answer from user
        System.out.print("Get guess result: ");
        int result = in.nextInt();

        //Create available guess array
        updateAvailable(availableGuess,guess,result);

        while (result < 40){
            int noOfAvailGuess = availableGuess.size();

            //to calculate minimum of the maximum sizes and choose the suitable guess
            Dictionary trackMinDict = new Hashtable();
            for (int i = 0; i < noOfAvailGuess; i++) {
                //to calculate maximum size of partition for each guess + initialise first
                Dictionary trackMaxDict = new Hashtable();
                for (int j = 0; j < 15; j++) {
                    trackMaxDict.put(answers[j], 0);
                }

                int trackNumber = (int) availableGuess.get(i);
                for (int j = 0; j < noOfAvailGuess; j++) {
                    int calculatedResult = guessSecret(trackNumber, (int) availableGuess.get(j));
                    trackMaxDict.put(calculatedResult, (int) trackMaxDict.get(calculatedResult) + 1);
                }
                trackMinDict.put(trackNumber, Collections.max(((Hashtable) trackMaxDict).values()));
            }

            int value = (int) Collections.min(((Hashtable) trackMinDict).values());
            guess = getKeyFromValue(trackMinDict, value);

            totalSteps++;
            System.out.println("Available guess:"+availableGuess);
            System.out.println(totalSteps+".Try guess: "+guess);

            //reinit guess
            System.out.print("Get guess result: ");
            result = in.nextInt();
            updateAvailable(availableGuess,guess,result);
        }

        System.out.println("Program ends. Total steps: "+totalSteps);

        return totalSteps;
    }
    static int guessSecret(int guess, int secret) {
        int[] digitGuess = digitOf(guess);
        int[] digitSecret = digitOf(secret);
        int strike = 0;
        int hit = 0;
        for (int i = 0; i < 4; i++) {
            if (digitGuess[i] == digitSecret[i]) strike++;
            else {
                int finalI = i;
                //  check if there is digit at position i exist in secret guess
                if (IntStream.of(digitSecret).anyMatch(x -> x == digitGuess[finalI])) 			hit++;
            }
        }
        return (strike * 10 + hit);
    }
    static int getKeyFromValue(Dictionary dict, int value){ //type: Integer,Integer
        Map<Integer,Integer> myMap = (Map) dict;
        for (Map.Entry<Integer,Integer> entry : myMap.entrySet()) {
            if (entry.getValue().equals(value)) {
                return entry.getKey();
            }
        }
        return -1;
    }
    public static void main(String[] args) {
	// write your code here
        guessWithInputKnuth();
    }
}
